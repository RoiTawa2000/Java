import java.util.TimerTask;
import java.util.Timer;
import javax.swing.*;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.*;


public class MinesweeperTester extends JFrame implements ActionListener {
	private JButton Button[][] = new JButton[8][8]; // Objekte
	private JLabel Text;
	private JLabel minesweepertimer;
	private JButton reset;
	private JCheckBox flag;
	private JButton showmines;
	private JButton hidemines;
	private JButton Game_won;
	private JButton Game_lost;
	private int Feld[][] = new int[8][8];
	final int mine = 10;

	private int minesset;
//------------------------------------------------------------------------------------------------------------------------------------------------------
	public MinesweeperTester() // Konstruktor

	{

		super("Minesweeper");
		JPanel Platte = new JPanel();
		Platte.setLayout(null);

		ButtonGroup Gruppe = new ButtonGroup();
		for (int i = 0; i < 8; i++) {
			for (int o = 0; o < 8; o++) {
				Button[i][o] = new JButton("");
				Button[i][o].setSize(50, 50);
				Button[i][o].setLocation(49 * i + 20, 49 * o + 100);
				Button[i][o].addActionListener(this);
				Button[i][o].setBackground(new Color(200,200,200));
				Gruppe.add(Button[i][o]);
				Platte.add(Button[i][o]);
			}
		}

		// Label für Timer setzen
		/*minesweepertimer = new JLabel();
		minesweepertimer.setSize(125, 45);
		minesweepertimer.setLocation(290, 15);
		minesweepertimer.setBackground(Color.black);
		minesweepertimer.setForeground(Color.white);
		Platte.add(minesweepertimer);*/

		// reset Button
		reset = new JButton("Neu Starten");
		reset.setSize(125, 45);
		reset.setLocation(20, 525);
		reset.setBackground(Color.black);
		reset.setForeground(Color.white);
		reset.addActionListener(this);
		Platte.add(reset);

		// Markierbox
		flag = new JCheckBox("Markieren");
		flag.setSize(125, 45);
		flag.setLocation(155, 525);
		flag.setBackground(Color.yellow);
		flag.setForeground(Color.black);
		flag.addActionListener(this);
		Platte.add(flag);

		// minen erstellen
		MinesCreator();

		// Minen zeigen
		showmines = new JButton("Minen zeigen");
		showmines.setSize(130, 45);
		showmines.setLocation(290, 525);
		showmines.setBackground(Color.black);
		showmines.setForeground(Color.white);
		showmines.addActionListener(this);
		Platte.add(showmines);

		// Minen verbergen
		hidemines = new JButton("Minen verbergen");
		hidemines.setSize(130, 45);
		hidemines.setLocation(290, 525);
		hidemines.setBackground(Color.black);
		hidemines.setForeground(Color.white);
		hidemines.addActionListener(this);
		Platte.add(hidemines);

		// Game gewonnen
		Game_won = new JButton("Gewonnen!");
		Game_won.setSize(250, 80);
		Game_won.setLocation(100, 15);
		Game_won.setFont(new Font("Arial", Font.BOLD, 35));
		Game_won.setBackground(Color.WHITE);
		Game_won.setForeground(Color.GREEN);
		Game_won.addActionListener(this);
		Platte.add(Game_won);
		Game_won.setVisible(false);

		// Game verloren
		Game_lost = new JButton("Verloren!");
		Game_lost.setSize(250, 80);
		Game_lost.setLocation(100, 15);
		Game_lost.setFont(new Font("Arial", Font.BOLD, 35));
		Game_lost.setBackground(new Color(240,240,240));
		Game_lost.setForeground(Color.RED);
		Game_lost.addActionListener(this);
		Platte.add(Game_lost);
		Game_lost.setVisible(false);

		// Titel
		Text = new JLabel("Minesweeper");
		Text.setSize(200, 50);
		Text.setLocation(140, 10);
		Text.setFont(new Font("Arial", Font.BOLD, 25));
		Text.setForeground(new Color (0,0,0));
		Platte.add(Text);
		setContentPane(Platte);

		Platte.setBackground(new Color (225, 243, 244));
	}

	// ------------------------------------------------------------------------------------------------------------------------------------------
	
	public void MinesCreator() {
		//exakt 10 Minen zufällig auf dem Feld verteilen
		while(minesset <= 9) {
			int x = (int) (Math.random() *8);
			int y = (int) (Math.random() *8);
			
			if (Feld[x][y] != mine) {
				Feld[x][y] = mine;
				minesset++;
			} else {
				System.out.println("Mine doppelt gesetzt"); //falls Mine auf das selbe Feld gesetzt wird
			}
		
		}

		// Nachbarfelder checken
		for (int x = 0; x < Feld.length; x++) {
			for (int y = 0; y < Feld[0].length; y++) {
				if (Feld[x][y] != mine) {
					int Nachbarfeldminenzähler = 0;

					if (x > 0 && y > 0 && Feld[x - 1][y - 1] == mine) { // oben links
						Nachbarfeldminenzähler++;
					}
					if (y > 0 && Feld[x][y - 1] == mine) {// oben
						Nachbarfeldminenzähler++;
					}
					if (x < Feld.length - 1 && y > 0 && Feld[x + 1][y - 1] == mine) {// oben rechts
						Nachbarfeldminenzähler++;
					}
					if (x > 0 && Feld[x - 1][y] == mine) { // mitte links
						Nachbarfeldminenzähler++;
					}
					if (x < Feld.length - 1 && Feld[x + 1][y] == mine) {// mitte rechts
						Nachbarfeldminenzähler++;
					}
					if (x > 0 && y < Feld.length - 1 && Feld[x - 1][y + 1] == mine) { // unten links
						Nachbarfeldminenzähler++;
					}
					if (y < Feld.length - 1 && Feld[x][y + 1] == mine) {// unten
						Nachbarfeldminenzähler++;
					}
					if (x < Feld.length - 1 && y < Feld.length - 1 && Feld[x + 1][y + 1] == mine) {// unten rechts
						Nachbarfeldminenzähler++;
					}
					Feld[x][y] = Nachbarfeldminenzähler;

				}
			}
		}
	}
	// ----------------------------------------------------------------------------------------------------------------------------------------

	// Spielfeld aufdecken
	public void lostGame() {
		for (int x = 0; x < 8; x++) {
			for (int y = 0; y < 8; y++) {
				if (Button[x][y].isEnabled()) {
					if (Feld[x][y] == mine) {
						Button[x][y].setText("X");
						Button[x][y].setEnabled(false);
						Button[x][y].setBackground(Color.PINK);

					} else if (Feld[x][y] == 0) {
						Button[x][y].setText("");
						Button[x][y].setForeground(Color.white);
						Button[x][y].setEnabled(false);
					} else {
						Button[x][y].setText(Feld[x][y] + "");
						Button[x][y].setForeground(Color.white);
						Button[x][y].setEnabled(false);
					}
				}
			}
		}
		Game_lost.setVisible(true);
	}

	// Minen anzeigen
	public void showmines() {
		for (int x = 0; x < 8; x++) {
			for (int y = 0; y < 8; y++) {
				if (Feld[x][y] == mine) {
					Button[x][y].setText("X");
					Button[x][y].setEnabled(false);
					Button[x][y].setBackground(Color.PINK);
				}
			}
		}
	}

	// Minen verbergen
	public void hidemines() {
		for (int x = 0; x < 8; x++) {
			for (int y = 0; y < 8; y++) {
				if (Feld[x][y] == mine) {
					Button[x][y].setText("");
					Button[x][y].setEnabled(true);
					Button[x][y].setBackground(new Color(200,200,200));
				}
			}
		}
	}

	
	/*  public void Nullen(ArrayList<Integer> toClear) { if (toClear.size() == 0) {
	  return; } else { int x = toClear.get(0)/100; int y = toClear.get(0)%100;
	  toClear.remove(0); if (Feld[x][y] == 0) {
	  Button[x][y].setText(" "); } 
	  
	  if (x>0 && y>0 &&Button[x-1][y-1].isEnabled()) {//oben links
	  Button[x-1][y-1].setText(Feld[x-1][y-1] + "");
	  Button[x-1][y-1].setEnabled(false);
	  Button[x-1][y-1].setBackground(Color.gray); if (Feld[x-1][y-1] == 0) {
	  toClear.add((x-1)*100 + y-1); Button[x-1][y-1].setText(" ");
	  
	  } } if (y>0 && Button[x][y-1].isEnabled()) {//oben
	  Button[x][y-1].setText(Feld[x][y-1] + ""); Button[x][y-1].setEnabled(false);
	  Button[x][y-1].setBackground(Color.gray); if (Feld[x][y-1] == 0) {
	  toClear.add((x)*100 + y-1); Button[x][y-1].setText(" ");
	  
	  } } if (x<Feld.length-1 && y>0 && Button[x+y][y-1].isEnabled()) {//oben rechts 
	  Button[x+1][y-1].setText(Feld[x+1][y-1] + "");
	  Button[x+1][y-1].setEnabled(false);
	  Button[x+1][y-1].setBackground(Color.gray); if (Feld[x+1][y-1] == 0) {
	  toClear.add((x+1)*100 + y-1); Button[x+1][y-1].setText(" ");
	  
	  } } if (x>0 && Button[x-1][y].isEnabled()) {//mitte links
	  Button[x-1][y].setText(Feld[x-1][y] + ""); Button[x-1][y].setEnabled(false);
	  Button[x-1][y].setBackground(Color.gray); if (Feld[x-1][y] == 0) {
	  toClear.add((x-1)*100 + y); Button[x-1][y].setText(" ");
	  
	  } } if (x<Feld.length-1 && Button[x+1][y].isEnabled()) {//mitte rechts
	  Button[x+1][y].setText(Feld[x+1][y] + ""); Button[x+1][y].setEnabled(false);
	  Button[x+1][y].setBackground(Color.gray); if (Feld[x+1][y] == 0) {
	  toClear.add((x+1)*100 + y); Button[x+1][y].setText(" ");
	  
	  } } if (x>0 && y<Feld[0].length-1 && Button[x-1][y+1].isEnabled()) {//unten links 
	  Button[x-1][y+1].setText(Feld[x-1][y+1] + "");
	  Button[x-1][y+1].setEnabled(false);
	  Button[x-1][y+1].setBackground(Color.gray); if (Feld[x-1][y+1] == 0) {
	  toClear.add((x-1)*100 + y+1); Button[x-1][y+1].setText(" ");
	  
	  } } if (y<Feld[0].length-1 && Button[x][y+1].isEnabled()) {//unten
	  Button[x][y+1].setText(Feld[x][y+1] + ""); Button[x][y+1].setEnabled(false);
	  Button[x][y+1].setBackground(Color.gray); if (Feld[x][y+1] == 0) {
	  toClear.add((x)*100 + y+1); Button[x][y+1].setText(" ");
	  
	  } } if (x<Feld[0].length-1 && y<Feld.length-1 &&
	  Button[x+1][y+1].isEnabled()) {//unten rechts
	  Button[x+1][y+1].setText(Feld[x+1][y+1] + "");
	  Button[x+1][y+1].setEnabled(false);
	  Button[x+1][y+1].setBackground(Color.gray); if (Feld[x+1][y+1] == 0) {
	  toClear.add((x+1)*100 + y+1); Button[x+1][y+1].setText(" ");
	  
	  } }
	  
	  
	  Nullen(toClear); } }*/
	 

	  // Schauen ob gewonnen wurde
	public void CheckWin() {
		Boolean win = true;
		for (int x = 0; x < 8; x++) {
			for (int y = 0; y < 8; y++) {
				if (Feld[x][y] != mine && Button[x][y].isEnabled() == true) {
					win = false;
				}
			}
		}
		if (win == true) {
			Game_won.setVisible(true);
			for (int x = 0; x < 8; x++) {
				for (int y = 0; y < 8; y++) {
					if (Feld[x][y] == mine) {
						Button[x][y].setBackground(Color.GREEN);
						Button[x][y].setText("X");
					}
					Button[x][y].setEnabled(false);
				}
			}
			flag.setEnabled(false);
			showmines.setEnabled(false);
			hidemines.setEnabled(false);
		}
	}

	// Timer
/*	public void runTimer() {
		timer.schedule(task, 0, 1000);

	}*/

	// Timer Minuten und Sekunden anzeigen
	/*static String getTime(int sec) {
		int minutes = 0;
		int seconds = 0;

		if (sec >= 60) {
			minutes = sec / 60;
			seconds = sec % 60;
		} else if (sec < 60) {
			minutes = 0;
			seconds = sec;
		}

		String strMins;
		String strSecs;

		if (seconds < 10)
			strSecs = "0" + Integer.toString(seconds);
		else
			strSecs = Integer.toString(seconds);

		if (minutes < 10)
			strMins = "0" + Integer.toString(minutes);
		else
			strMins = "0" + Integer.toString(minutes);

		String time = strMins + ":" + strSecs;
		return time;

	}

	Timer timer = new Timer();
	int i = 0;
	TimerTask task = new TimerTask() {
		public void run() {
			String time = getTime(i);
			System.out.println(time);
			i++;
		}
	};*/

	//----------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Ereignisse
	public void actionPerformed(ActionEvent Ereignis) {

		Object Quelle = Ereignis.getSource();
	

		if (flag.isSelected()) { // Wenn markieren ausgewählt, wird das Feld Gelb, sonst grau
			for (int x = 0; x < 8; x++) {
				for (int y = 0; y < 8; y++) {
					if (Quelle == Button[x][y]) {
						Button[x][y].setBackground(Color.yellow);
					}
				}
			}
		} else {
			for (int x = 0; x < 8; x++) {
				for (int y = 0; y < 8; y++) {
					if (Quelle == Button[x][y]) {
						Button[x][y].setBackground(new Color(255,255,255));
					}
				}

			}
		}
		// Minen zeigen, "Minen zeigen" Schaltfläche verdecken, "Minen verstecken"
		// Schaltfläche zeigen
		if (Quelle == showmines) {
			showmines();
			showmines.setVisible(false);
			hidemines.setVisible(true);
		}
		// Minen verbergen, "Minen verbergen" Schaltfläche verbergen, "Minen zeigen"
		// Schaltfläche zeigen
		if (Quelle == hidemines) {
			hidemines();
			hidemines.setVisible(false);
			showmines.setVisible(true);
		}
		// Wenn Reset Button gedrückt wurde & Game verloren/gewonnen Button gedrückt
		if (Quelle == reset || Quelle == Game_lost || Quelle == Game_won) {
			for (int x = 0; x < 8; x++) {
				for (int y = 0; y < 8; y++) {
					
					Button[x][y].setEnabled(true);
					Button[x][y].setText(" ");
					Feld[x][y] = 0;
					Button[x][y].setBackground(new Color(200,200,200));

				}
			}
			Game_won.setVisible(false);
			hidemines.setVisible(false);
			showmines.setVisible(true);
			showmines.setEnabled(true);
			hidemines.setEnabled(true);
			Game_lost.setVisible(false);
			flag.setEnabled(true);
			flag.setSelected(false);
			minesset=0;
			MinesCreator();

		} else if ((boolean) (Quelle = flag.isSelected())) { // Wenn markieren ausgewählt ist, werden keine Felder
																// aufgedeckt
			/*
			 * for (int x = 0; x < 8; x++) { for (int y = 0; y < 8; y++) { if (Quelle ==
			 * Button[x][y]) {
			 * 
			 * } } }
			 */
		} else { // Spiel spielen
			for (int x = 0; x < 8; x++) {
				for (int y = 0; y < 8; y++) {
					if (Ereignis.getSource().equals(Button[x][y])) {
						if (Feld[x][y] == mine) { // Wenn Feld eine Mine ist, dann ist das Game verloren
							Button[x][y].setText("X");
							lostGame();
							Button[x][y].setBackground(Color.red);
							showmines.setEnabled(false);
							Game_lost.setVisible(true);
							flag.setEnabled(false);
						} else if (Feld[x][y] == 0) { // Die Textfelder mit 0 leeren

							Button[x][y].setEnabled(false);
							/*ArrayList<Integer> toClear = new ArrayList<Integer>();
							toClear.add(x*100+y);
							Nullen(toClear);*/
							Button[x][y].setText(" ");
							CheckWin();
						} else { // Nachbarfelderminenanzahl anzeigen

							Button[x][y].setText(Feld[x][y] + "");
							Button[x][y].setEnabled(false);
							CheckWin();
						}

					}
				}
			}
		}

	}
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	public static void main(String[] args) {
		MinesweeperTester Fenster = new MinesweeperTester();
		Fenster.setSize(450, 650);
		Fenster.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Fenster.setVisible(true);
		// time = new minesweeper();
		//time.runTimer();

	}
}
